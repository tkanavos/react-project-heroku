{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Dora\\\\Desktop\\\\react-project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _objectSpread from\"C:\\\\Users\\\\Dora\\\\Desktop\\\\react-project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:\\\\Users\\\\Dora\\\\Desktop\\\\react-project\\\\frontend\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';var EditCountryForm=function EditCountryForm(props){var updateCountry=props.updateCountry;var _useState=useState(props.currentCountry),_useState2=_slicedToArray(_useState,2),country=_useState2[0],setCountry=_useState2[1];useEffect(function(){setCountry(props.currentCountry);},[props]);// You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\nvar handleInputChange=function handleInputChange(event){var _event$target=event.target,name=_event$target.name,value=_event$target.value;setCountry(_objectSpread(_objectSpread({},country),{},_defineProperty({},name,value)));};return/*#__PURE__*/React.createElement(\"form\",{onSubmit:function onSubmit(event){event.preventDefault();updateCountry(country.id,country);}},/*#__PURE__*/React.createElement(\"label\",null,\"Name\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"name\",value:country.name,onChange:handleInputChange}),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"label\",null,\"Capital\"),/*#__PURE__*/React.createElement(\"input\",{type:\"text\",name:\"capital\",value:country.capital,onChange:handleInputChange})),/*#__PURE__*/React.createElement(\"p\",null,/*#__PURE__*/React.createElement(\"button\",null,\"Update Country\"),/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return props.setEditing(false);},className:\"button muted-button\"},\"Cancel\")));};export default EditCountryForm;","map":{"version":3,"sources":["C:/Users/Dora/Desktop/react-project/frontend/src/components/EditCountryForm.js"],"names":["React","useState","useEffect","EditCountryForm","props","updateCountry","currentCountry","country","setCountry","handleInputChange","event","target","name","value","preventDefault","id","capital","setEditing"],"mappings":"wgBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CAEA,GAAMC,CAAAA,eAAe,CAAG,QAAlBA,CAAAA,eAAkB,CAAAC,KAAK,CAAI,IACxBC,CAAAA,aADwB,CACPD,KADO,CACxBC,aADwB,eAECJ,QAAQ,CAACG,KAAK,CAACE,cAAP,CAFT,wCAEvBC,OAFuB,eAEdC,UAFc,eAI/BN,SAAS,CACP,UAAM,CACJM,UAAU,CAACJ,KAAK,CAACE,cAAP,CAAV,CACD,CAHM,CAIP,CAAEF,KAAF,CAJO,CAAT,CAOA;AAEA,GAAMK,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAAAC,KAAK,CAAI,mBACTA,KAAK,CAACC,MADG,CACzBC,IADyB,eACzBA,IADyB,CACnBC,KADmB,eACnBA,KADmB,CAGjCL,UAAU,gCAAMD,OAAN,wBAAgBK,IAAhB,CAAuBC,KAAvB,GAAV,CACD,CAJD,CAMA,mBACE,4BACE,QAAQ,CAAE,kBAAAH,KAAK,CAAI,CACjBA,KAAK,CAACI,cAAN,GACAT,aAAa,CAACE,OAAO,CAACQ,EAAT,CAAaR,OAAb,CAAb,CACD,CAJH,eAKE,wCALF,cAME,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,MAAxB,CAA+B,KAAK,CAAEA,OAAO,CAACK,IAA9C,CAAoD,QAAQ,CAAEH,iBAA9D,EANF,cAOE,0CACE,2CADF,cAEE,6BAAO,IAAI,CAAC,MAAZ,CAAmB,IAAI,CAAC,SAAxB,CAAkC,KAAK,CAAEF,OAAO,CAACS,OAAjD,CAA0D,QAAQ,CAAEP,iBAApE,EAFF,CAPF,cAWE,0CACE,mDADF,cAEE,8BAAQ,OAAO,CAAE,yBAAML,CAAAA,KAAK,CAACa,UAAN,CAAiB,KAAjB,CAAN,EAAjB,CAAgD,SAAS,CAAC,qBAA1D,WAFF,CAXF,CADF,CAoBD,CAvCD,CAyCA,cAAed,CAAAA,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\n\r\nconst EditCountryForm = props => {\r\n  const {updateCountry} = props;\r\n  const [ country, setCountry ] = useState(props.currentCountry)\r\n\r\n  useEffect(\r\n    () => {\r\n      setCountry(props.currentCountry)\r\n    },\r\n    [ props ]\r\n  )\r\n\r\n  // You can tell React to skip applying an effect if certain values haven’t changed between re-renders. [ props ]\r\n\r\n  const handleInputChange = event => {\r\n    const { name, value } = event.target\r\n\r\n    setCountry({ ...country, [name]: value })\r\n  }\r\n\r\n  return (\r\n    <form\r\n      onSubmit={event => {\r\n        event.preventDefault()\r\n        updateCountry(country.id, country)\r\n      }}>\r\n      <label>Name</label>\r\n      <input type=\"text\" name=\"name\" value={country.name} onChange={handleInputChange} />\r\n      <p>\r\n        <label>Capital</label>\r\n        <input type=\"text\" name=\"capital\" value={country.capital} onChange={handleInputChange} />\r\n      </p>\r\n      <p>\r\n        <button>Update Country</button>\r\n        <button onClick={() => props.setEditing(false)} className=\"button muted-button\">\r\n        Cancel\r\n        </button>\r\n      </p>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EditCountryForm"]},"metadata":{},"sourceType":"module"}